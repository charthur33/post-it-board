{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\cwill\\\\OneDrive\\\\Desktop\\\\post-it-app\\\\client\\\\src\\\\components\\\\NoteArea.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext } from \"react\";\nimport Note from \"./Note.jsx\";\nimport axios from \"axios\";\nimport InputArea from \"./InputArea.jsx\";\nimport UserContext from '../context/userContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction NoteArea(props) {\n  _s();\n\n  const [allNotes, setNewNote] = useState([]);\n  const {\n    userData\n  } = useContext(UserContext);\n  const userIDString = userData.user.id + \"\";\n  const [firstLoad, setFirstLoad] = useState(false); //initial call to render a user's notes when they log in\n\n  if (firstLoad === false) {\n    getUserNotes();\n    setFirstLoad(true);\n  }\n\n  async function addNote(newNoteTitle, newNoteContent, color, rotation) {\n    try {\n      const newNote = {\n        noteTitle: newNoteTitle,\n        noteContent: newNoteContent,\n        noteColor: color,\n        displayStyle: rotation,\n        userID: userIDString\n      };\n      await axios.post(\"http://localhost:5000/notes/add-note\", newNote);\n      getUserNotes();\n    } catch (err) {\n      console.log(err);\n    }\n  } //Get notes specific to current user \n\n\n  async function getUserNotes() {\n    let userNoteID = userIDString;\n\n    try {\n      const notes = await axios.get(\"http://localhost:5000/notes/get-notes?userID=\" + userNoteID);\n      var userNotes = notes.data;\n      setNewNote(userNotes);\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  async function deleteNote(id) {\n    let noteToDelete = allNotes[id];\n\n    try {\n      await axios.delete(\"http://localhost:5000/notes/delete-note?noteID=\" + noteToDelete._id);\n      setNewNote(prevNotes => {\n        return prevNotes.filter((note, index) => {\n          return index !== id;\n        });\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(InputArea, {\n      onAdd: addNote\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), allNotes.map((note, index) => /*#__PURE__*/_jsxDEV(Note, {\n      id: index,\n      onDelete: deleteNote,\n      title: note.noteTitle,\n      content: note.noteContent,\n      customColor: note.noteColor,\n      customRotation: note.displayStyle\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 17\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }, this);\n}\n\n_s(NoteArea, \"Mr56E/zI0Mwj3oTD+LBIX3EbF14=\");\n\n_c = NoteArea;\nexport default NoteArea;\n\nvar _c;\n\n$RefreshReg$(_c, \"NoteArea\");","map":{"version":3,"sources":["C:/Users/cwill/OneDrive/Desktop/post-it-app/client/src/components/NoteArea.jsx"],"names":["React","useState","useContext","Note","axios","InputArea","UserContext","NoteArea","props","allNotes","setNewNote","userData","userIDString","user","id","firstLoad","setFirstLoad","getUserNotes","addNote","newNoteTitle","newNoteContent","color","rotation","newNote","noteTitle","noteContent","noteColor","displayStyle","userID","post","err","console","log","userNoteID","notes","get","userNotes","data","deleteNote","noteToDelete","delete","_id","prevNotes","filter","note","index","map"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from \"react\";\r\nimport Note from \"./Note.jsx\";\r\nimport axios from \"axios\";\r\nimport InputArea from \"./InputArea.jsx\";\r\nimport UserContext from '../context/userContext';\r\n\r\nfunction NoteArea(props) {\r\n    const [allNotes, setNewNote] = useState([]);\r\n    const { userData } = useContext(UserContext);\r\n    const userIDString = userData.user.id + \"\";\r\n    const [firstLoad, setFirstLoad] = useState(false);\r\n\r\n    //initial call to render a user's notes when they log in\r\n    if (firstLoad === false) {\r\n        getUserNotes();\r\n        setFirstLoad(true);\r\n    }\r\n\r\n    async function addNote(newNoteTitle, newNoteContent, color, rotation) {\r\n        try {\r\n            const newNote = {\r\n                noteTitle: newNoteTitle,\r\n                noteContent: newNoteContent,\r\n                noteColor: color,\r\n                displayStyle: rotation,\r\n                userID: userIDString\r\n            };\r\n            await axios.post(\"http://localhost:5000/notes/add-note\", newNote);\r\n            getUserNotes();\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    //Get notes specific to current user \r\n    async function getUserNotes() {\r\n        let userNoteID = userIDString;\r\n        try {\r\n            const notes = await axios.get(\"http://localhost:5000/notes/get-notes?userID=\" + userNoteID);\r\n            var userNotes = notes.data;\r\n            setNewNote(userNotes);\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    async function deleteNote(id) {\r\n        let noteToDelete = allNotes[id];\r\n        try {\r\n            await axios.delete(\"http://localhost:5000/notes/delete-note?noteID=\" + noteToDelete._id);\r\n            setNewNote((prevNotes) => {\r\n                return prevNotes.filter((note, index) => {\r\n                    return index !== id;\r\n                });\r\n            });\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <InputArea onAdd={addNote} />\r\n            {allNotes.map((note, index) => (\r\n                <Note\r\n                    key={index}\r\n                    id={index}\r\n                    onDelete={deleteNote}\r\n                    title={note.noteTitle}\r\n                    content={note.noteContent}\r\n                    customColor={note.noteColor}\r\n                    customRotation={note.displayStyle}\r\n                />\r\n            ))}\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default NoteArea;\r\n"]},"metadata":{},"sourceType":"module"}